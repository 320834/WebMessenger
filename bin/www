#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-locallibrary-tutorial:server');
var http = require('http');
var socket = require('socket.io');

var currentdate = new Date();
var datetime = currentdate.getDate() + "/"
                + (currentdate.getMonth()+1)  + "/" 
                + currentdate.getFullYear() + " @ "  
                + currentdate.getHours() + ":"  
                + currentdate.getMinutes() + ":" 
                + currentdate.getSeconds();

/**
 * Get port from environment and store in Express.
 */

// var port = normalizePort(process.env.PORT || '8080');
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(8080);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Global connected users 
 */
//var a = {'stuff': 'hey', 'stop': 'okay'};

var globalConnectedUsers = [];

/**
 *  Create socket server
 */

var connectedUsers = 0;

var socket = require('socket.io');
var io = socket(server, {
	pingInterval: 10000,
	pintTimeout: 20000
});

function chatBot(str, name)
{
  if(str.includes("Hi") || str.includes('hi') && str.length < 3)
  {
      return "Hi " + name; 
  }
  else if(str.includes('help') && str.length === 4)
  {
    return "Hi I got your help response. As of right now, the chatbot is a work in progress. We hope to add more functionalities";
  }
  else
  {
    return "I am sorry I do not understand. Please enter help for more information";
  }
}



io.on('connection', function(socket){
 
  connectedUsers++;
  io.emit('updateUsersNumber', connectedUsers - 1);

  var usernameObj = socket.handshake.query.username;

   console.log("A user has been logged " + socket.handshake.query.username  + ":" + socket.id);
   var obj = {socketID: socket.id, username: usernameObj};
   globalConnectedUsers.push(obj);
    


    io.emit('updateUsersAdd', globalConnectedUsers);
 
    io.to(socket.id).emit('recieveChatBot', {originName: "chatbot", message: "Hi this is chatbot. For more functionality, please type help. To go back to global chat please type home in find chat field"});

    var initMessage = "Hi Welcome To Global Chat. Please send a message below to start chatting. To private message, see right panel"
    io.to(socket.id).emit('recieve', {
    		originName: "global",
            originSocketID: "",
            destSocketID: "global",
            destName: "global",
            message: initMessage
        });

    console.log(globalConnectedUsers);


  //io.sockets.socket(socket.id).emit('recieveChatBot', {originName: "chatbot", message: "Hi! I am a chatbot, please to meet you. If you have any questions type 'help'. Otherwise, type anything"});

  socket.on('typing', function(msg){
    //console.log(msg.originName + ": is typing");

    //block from sending back to itself
    if(msg.destSocketID === 'global')
    {
      //console.log("sending to global")
      io.emit('typingRecieve', msg);
    }
    else
    {
      socket.broadcast.to(msg.destSocketID).emit('typingRecieve', msg);
    }
    
    
    
  })

  socket.on('chat', function(msg){

    if(msg.destSocketID === "global")
    {
      io.emit('recieve', msg);
    }
    else if(msg.destName === "chatbot")
    {
      var originName = msg.originName; 
      var destName = msg.destName;
      var originSocketID = msg.originSocketID;
      var destSocketID = msg.destSocketID;
      var message = msg.message;

      var response = chatBot(message, originName);

      msg.message = response;
      msg.destName = originName;
      msg.originName = destName;
      msg.destSocketID = originSocketID;
      msg.originSocketID = destSocketID;

      
      io.to(originSocketID).emit('recieveChatBot', msg);
    }
    else
    {
      socket.broadcast.to(msg.destSocketID).emit('recieve', msg);
    }
  
    
  });



  socket.on('disconnect', function(){

  	connectedUsers--;

    io.emit('updateUsersNumber', connectedUsers - 1);

    var a = findPos(socket.id);

    console.log("A user has disconnected " + socket.id);

   
   	if(a >= 0)
   	{
	var obj = globalConnectedUsers.splice(a,1);
    //console.log("Position: " + a);
    //console.log(globalConnectedUsers);
    console.log("Removed this");
    console.log(obj);

    setTimeout(function(){
      io.emit('updateUsersRemove', obj);
    }, 200);
   	}

    
    
    
  });


});



function findPos(socketID)
{
    for(var i = 0; i < globalConnectedUsers.length; i++)
    {
      if(globalConnectedUsers[i].socketID === socketID)
      {
        return i;
      }
    }

    return -1;
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports = server;