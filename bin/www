#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-locallibrary-tutorial:server');
var http = require('http');
var socket = require('socket.io');

var currentdate = new Date();
var datetime = currentdate.getDate() + "/"
                + (currentdate.getMonth()+1)  + "/" 
                + currentdate.getFullYear() + " @ "  
                + currentdate.getHours() + ":"  
                + currentdate.getMinutes() + ":" 
                + currentdate.getSeconds();

/**
 * Get port from environment and store in Express.
 */

// var port = normalizePort(process.env.PORT || '8080');
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(8080);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Global connected users 
 */



/**
 *  Create socket server
 */

var connectedUsers = 0;

var socket = require('socket.io');
var io = socket(server);

io.on('connection', function(socket){


  connectedUsers++;
  console.log('A user has connected. There are ' + connectedUsers + ' connected users. ' + socket.id);

  socket.on('chat', function(msg){
    var totalMsg = msg.handle + ": " + msg.message;
    console.log(datetime + " " + msg.handle + ": " + msg.message);
    io.emit('recieve', totalMsg);
  });
  
  socket.on('disconnect', function(){

    connectedUsers--;
    console.log('A user disconnected. There are ' + connectedUsers + ' users left');
  });
});




/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports = server;